name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get-version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update pyproject.toml version
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
    
    - name: Update Rust Cargo.toml version
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        sed -i "s/^version = .*/version = \"$VERSION\"/" src/rust/entityframe/Cargo.toml
    
    - name: Upload pyproject.toml
      uses: actions/upload-artifact@v4
      with:
        name: pyproject
        path: pyproject.toml
    
    - name: Upload Cargo.toml
      uses: actions/upload-artifact@v4
      with:
        name: cargo-toml
        path: src/rust/entityframe/Cargo.toml

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: update-version
    environment: release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download pyproject.toml
      uses: actions/download-artifact@v4
      with:
        name: pyproject
        path: .
    
    - name: Download Cargo.toml
      uses: actions/download-artifact@v4
      with:
        name: cargo-toml
        path: src/rust/entityframe/
    
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v5
      with:
        python-version: '3.13'
    
    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - name: Install cibuildwheel
      run: uv tool install cibuildwheel
    
    - name: Build wheels
      run: uv tool run cibuildwheel --output-dir wheelhouse
      env:
        CIBW_SKIP: pp* cp36-* cp37-* cp38-* *-win32 *i686*
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_BUILD: "uv tool install maturin"
        CIBW_BUILD_FRONTEND: "build"
        MACOSX_DEPLOYMENT_TARGET: "10.12"
    
    - uses: actions/upload-artifact@v4
      with:
        path: ./wheelhouse/*.whl
        name: wheel-builds-${{ matrix.os }}

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: update-version
    environment: release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download pyproject.toml
      uses: actions/download-artifact@v4
      with:
        name: pyproject
        path: .
    
    - name: Download Cargo.toml
      uses: actions/download-artifact@v4
      with:
        name: cargo-toml
        path: src/rust/entityframe/
    
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v5
      with:
        python-version: '3.13'
    
    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - name: Install maturin
      run: uv tool install maturin
    
    - name: Build source distribution
      run: uv tool run maturin sdist --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    environment: release
    permissions:
      id-token: write
    
    steps:
    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheel-builds-*
        path: dist
        merge-multiple: true
    
    - name: Download sdist artifact
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1